var searchData=
[
  ['query_0',['QUERY',['../classmicroTube_1_1component_1_1DatabaseClient.html#a030a954051120775bec1a85e45965d3c',1,'microTube::component::DatabaseClient::QUERY(registerUser, &quot;INSERT INTO User (email, password, nickname, firstname, lastname, phonenumber, birthDate, joinDate, &quot; &quot;secretQuestion1, secretQuestion2, secretQuestion3, secretAnswer1, secretAnswer2, secretAnswer3, isAdmin, isActive) &quot; &quot;VALUES (:user.email, :user.password, :user.nickname, :user.firstname, :user.lastname, :user.phonenumber, :user.birthDate, &quot; &quot;DATE(&apos;now&apos;), :user.secretQuestion1, :user.secretQuestion2, :user.secretQuestion3, &quot; &quot;:user.secretAnswer1, :user.secretAnswer2, :user.secretAnswer3, FALSE, TRUE) &quot; &quot;RETURNING id;&quot;, PARAM(oatpp::Object&lt; microTube::dto::UserRegistrationDTO &gt;, user))'],['../classmicroTube_1_1component_1_1DatabaseClient.html#a206583c7a38fc5d174014aab1965be5b',1,'microTube::component::DatabaseClient::QUERY(getUserDatabaseEntryById, &quot;SELECT id, email, password, nickname, firstname, lastname, phonenumber, birthDate, joinDate, secretQuestion1, secretQuestion2, secretQuestion3, secretAnswer1, secretAnswer2, secretAnswer3, isAdmin, isActive &quot; &quot;FROM User &quot; &quot;WHERE id = :id;&quot;, PARAM(oatpp::UInt64, id))'],['../classmicroTube_1_1component_1_1DatabaseClient.html#ac90738233970dd8c4ef614eacd29e5d0',1,'microTube::component::DatabaseClient::QUERY(getUserInfoById, &quot;SELECT email, nickname, firstname, lastname, phonenumber, birthDate &quot; &quot;FROM User &quot; &quot;WHERE id = :id;&quot;, PARAM(oatpp::UInt64, id))'],['../classmicroTube_1_1component_1_1DatabaseClient.html#adc2b55bf650bb103a901b3610de653a0',1,'microTube::component::DatabaseClient::QUERY(getUserIdByEmail, &quot;SELECT id &quot; &quot;FROM User &quot; &quot;WHERE email = :email;&quot;, PARAM(oatpp::String, email))'],['../classmicroTube_1_1component_1_1DatabaseClient.html#a3a818729b9125659fd55360cc6238542',1,'microTube::component::DatabaseClient::QUERY(getUserByIdAndPassword, &quot;SELECT * &quot; &quot;FROM User &quot; &quot;WHERE id = :id AND password = :password;&quot;, PARAM(oatpp::UInt64, id), PARAM(oatpp::String, password))'],['../classmicroTube_1_1component_1_1DatabaseClient.html#af5fa3fcdc229f765953a65b647e6b24c',1,'microTube::component::DatabaseClient::QUERY(makeUserLikeVideo, &quot;INSERT INTO Video_Likes (uuid, user_id) &quot; &quot;VALUES (:videoId, :userId) &quot; &quot;ON CONFLICT (uuid, user_id) DO NOTHING;&quot;, PARAM(oatpp::String, videoId), PARAM(oatpp::UInt64, userId))'],['../classmicroTube_1_1component_1_1DatabaseClient.html#a664880e00652864cd7595c88ff43ef52',1,'microTube::component::DatabaseClient::QUERY(getLikeCountForVideo, &quot;SELECT COUNT(*) AS likeCount &quot; &quot;FROM Video_Likes &quot; &quot;WHERE uuid = :videoId;&quot;, PARAM(oatpp::String, videoId))'],['../classmicroTube_1_1component_1_1DatabaseClient.html#a8bc6f0c7ceccd171dc59d41914f6347b',1,'microTube::component::DatabaseClient::QUERY(getDislikeCountForVideo, &quot;SELECT COUNT(*) AS dislikeCount &quot; &quot;FROM Video_Disikes &quot; &quot;WHERE uuid = :videoId;&quot;, PARAM(oatpp::String, videoId))'],['../classmicroTube_1_1component_1_1DatabaseClient.html#a08174461f9f9bbacdc9218ac5373d7c3',1,'microTube::component::DatabaseClient::QUERY(getUniqueViewCountForVideo, &quot;SELECT COUNT(*) AS uniqueViewCount &quot; &quot;FROM Videos_Unique_Views &quot; &quot;WHERE uuid = :videoId;&quot;, PARAM(oatpp::String, videoId))'],['../classmicroTube_1_1component_1_1DatabaseClient.html#a11f5fd24913a31d29fd8b9a964b92062',1,'microTube::component::DatabaseClient::QUERY(makeUserDislikeVideo, &quot;INSERT INTO Video_Disikes (uuid, user_id) &quot; &quot;VALUES (:videoId, :userId) &quot; &quot;ON CONFLICT (uuid, user_id) DO NOTHING;&quot;, PARAM(oatpp::String, videoId), PARAM(oatpp::UInt64, userId))'],['../classmicroTube_1_1component_1_1DatabaseClient.html#a037e4c32d71758a2ca63ac79285e4da0',1,'microTube::component::DatabaseClient::QUERY(removeLike, &quot;DELETE FROM Video_Likes &quot; &quot;WHERE uuid = :videoId AND user_id = :userId;&quot;, PARAM(oatpp::String, videoId), PARAM(oatpp::UInt64, userId))'],['../classmicroTube_1_1component_1_1DatabaseClient.html#ab66752c68593c9b27bdf76f7875fc8f4',1,'microTube::component::DatabaseClient::QUERY(removeDislike, &quot;DELETE FROM Video_Disikes &quot; &quot;WHERE uuid = :videoId AND user_id = :userId;&quot;, PARAM(oatpp::String, videoId), PARAM(oatpp::UInt64, userId))'],['../classmicroTube_1_1component_1_1DatabaseClient.html#a6e0af88ab3358efc218d1ee988fb0557',1,'microTube::component::DatabaseClient::QUERY(addSubscription, &quot;INSERT INTO User_Channel_Subscriptions (memberID, creatorID) &quot; &quot;VALUES (:memberId, :creatorId) &quot; &quot;ON CONFLICT (memberID, creatorID) DO NOTHING;&quot;, PARAM(oatpp::UInt64, memberId), PARAM(oatpp::UInt64, creatorId))'],['../classmicroTube_1_1component_1_1DatabaseClient.html#ac6b2aa6c31132d82d2962ba854f6a2f0',1,'microTube::component::DatabaseClient::QUERY(removeSubscription, &quot;DELETE FROM User_Channel_Subscriptions &quot; &quot;WHERE memberID = :memberId AND creatorID = :creatorId;&quot;, PARAM(oatpp::UInt64, memberId), PARAM(oatpp::UInt64, creatorId))'],['../classmicroTube_1_1component_1_1DatabaseClient.html#a396404255db303701650795fcc6a29b5',1,'microTube::component::DatabaseClient::QUERY(getSubscriberCountForChannel, &quot;SELECT COUNT(*) AS subscriberCount &quot; &quot;FROM User_Channel_Subscriptions &quot; &quot;WHERE creatorID = :channelId;&quot;, PARAM(oatpp::UInt64, channelId))'],['../classmicroTube_1_1component_1_1DatabaseClient.html#a99bf544be0c66297a13f86f18d0807eb',1,'microTube::component::DatabaseClient::QUERY(checkChannelExists, &quot;SELECT EXISTS (&quot; &quot;  SELECT 1 &quot; &quot;  FROM Channel &quot; &quot;  WHERE id = :channelId&quot; &quot;) AS channelExists;&quot;, PARAM(oatpp::UInt64, channelId))'],['../classmicroTube_1_1component_1_1DatabaseClient.html#a6e5cdd21c3b6f3789c2f3a951703b585',1,'microTube::component::DatabaseClient::QUERY(getChannelDescription, &quot;SELECT description &quot; &quot;FROM Channel &quot; &quot;WHERE id = :channelId;&quot;, PARAM(oatpp::UInt64, channelId))'],['../classmicroTube_1_1component_1_1DatabaseClient.html#a296ffbf58d7f2616758925764b016334',1,'microTube::component::DatabaseClient::QUERY(setChannelDescription, &quot;UPDATE Channel &quot; &quot;SET description = :newDescription &quot; &quot;WHERE id = :channelId;&quot;, PARAM(oatpp::String, newDescription), PARAM(oatpp::UInt64, channelId))'],['../classmicroTube_1_1component_1_1DatabaseClient.html#a74473befc435d5f0fe62ca6e142359ab',1,'microTube::component::DatabaseClient::QUERY(hasUserViewedVideo, &quot;SELECT EXISTS (&quot; &quot;  SELECT 1 &quot; &quot;  FROM Videos_Unique_Views &quot; &quot;  WHERE uuid = :videoId AND user_id = :userId&quot; &quot;) AS hasViewed;&quot;, PARAM(oatpp::String, videoId), PARAM(oatpp::UInt64, userId))'],['../classmicroTube_1_1component_1_1DatabaseClient.html#ad80288f173d9f8bb21a8ab51a414353d',1,'microTube::component::DatabaseClient::QUERY(addUniqueView, &quot;INSERT INTO Videos_Unique_Views (uuid, user_id) &quot; &quot;SELECT :videoId, :userId &quot; &quot;WHERE :videoId IS NOT NULL AND :userId IS NOT NULL AND :videoId != &apos;&apos; &quot; &quot;ON CONFLICT (uuid, user_id) DO NOTHING;&quot;, PARAM(oatpp::String, videoId), PARAM(oatpp::UInt64, userId))'],['../classmicroTube_1_1component_1_1DatabaseClient.html#ac4e742af2a37b91b76740a4e119bda07',1,'microTube::component::DatabaseClient::QUERY(getUniqueViewCount, &quot;SELECT COUNT(*) AS viewCount &quot; &quot;FROM Videos_Unique_Views &quot; &quot;WHERE uuid = :videoId;&quot;, PARAM(oatpp::String, videoId))'],['../classmicroTube_1_1component_1_1DatabaseClient.html#afeb2651d4c308f11087cf78aa56b5e1d',1,'microTube::component::DatabaseClient::QUERY(isTokenValid, &quot;SELECT token, user_id AS id &quot; &quot;FROM User_Tokens &quot; &quot;WHERE token = :token &quot; &quot;AND validTillDate &gt; DATE(&apos;now&apos;);&quot;, PARAM(oatpp::String, token))'],['../classmicroTube_1_1component_1_1DatabaseClient.html#aafc9dcf0dcf67764a3bd84b60e1504af',1,'microTube::component::DatabaseClient::QUERY(insertNewToken, &quot;INSERT INTO User_Tokens (token, user_id, createDate, validTillDate) &quot; &quot;VALUES (:token, :userId, DATE(&apos;now&apos;), DATE(&apos;now&apos;, &apos;+30 days&apos;));&quot;, PARAM(oatpp::String, token), PARAM(oatpp::UInt64, userId))'],['../classmicroTube_1_1component_1_1DatabaseClient.html#ae189d627b56127102ef6901f83867a71',1,'microTube::component::DatabaseClient::QUERY(extendTokenValidity, &quot;UPDATE User_Tokens &quot; &quot;SET validTillDate = DATE(&apos;now&apos;, &apos;+30 days&apos;) &quot; &quot;WHERE token = :token &quot; &quot;AND validTillDate &gt; DATE(&apos;now&apos;);&quot;, PARAM(oatpp::String, token))'],['../classmicroTube_1_1component_1_1DatabaseClient.html#a2d9364f7c187855695b6a326fb778793',1,'microTube::component::DatabaseClient::QUERY(getUserIdByToken, &quot;SELECT user_id &quot; &quot;FROM User_Tokens &quot; &quot;WHERE token = :token &quot; &quot;AND validTillDate &gt; DATE(&apos;now&apos;);&quot;, PARAM(oatpp::String, token))'],['../classmicroTube_1_1component_1_1DatabaseClient.html#a9c83546ad3b19562b0f9add6f66f1f84',1,'microTube::component::DatabaseClient::QUERY(getValidTokens, &quot;SELECT token &quot; &quot;FROM User_Tokens &quot; &quot;WHERE user_id = :userId &quot; &quot;AND validTillDate &gt; DATE(&apos;now&apos;);&quot;, PARAM(oatpp::UInt64, userId))'],['../classmicroTube_1_1component_1_1DatabaseClient.html#a5a30d05cac70e8c668e4591444366060',1,'microTube::component::DatabaseClient::QUERY(updateChannelDescriptionByUserId, &quot;UPDATE Channel &quot; &quot;SET description = :newDescription &quot; &quot;WHERE id = (&quot; &quot;  SELECT channelId &quot; &quot;  FROM UserChannelJunction &quot; &quot;  WHERE user_id = :userId &quot; &quot;  LIMIT 1&quot; &quot;);&quot;, PARAM(oatpp::String, newDescription), PARAM(oatpp::UInt64, userId))'],['../classmicroTube_1_1component_1_1DatabaseClient.html#a3d5b7b57d34a5b2c120f276dbe2c7815',1,'microTube::component::DatabaseClient::QUERY(updateChannelDescriptionById, &quot;UPDATE Channel &quot; &quot;SET description = :newDescription &quot; &quot;WHERE id = :channelId;&quot;, PARAM(oatpp::String, newDescription), PARAM(oatpp::UInt64, channelId))'],['../classmicroTube_1_1component_1_1DatabaseClient.html#af2d8b7d6889ca46cf78db6481964bc21',1,'microTube::component::DatabaseClient::QUERY(createNewChannel, &quot;INSERT INTO Channel (description) &quot; &quot;VALUES (:description) &quot; &quot;RETURNING id;&quot;, PARAM(oatpp::String, description))'],['../classmicroTube_1_1component_1_1DatabaseClient.html#a016e78ad053a5fcb28cb66183158bed2',1,'microTube::component::DatabaseClient::QUERY(createUserChannelJunction, &quot;INSERT INTO UserChannelJunction (channelId, user_id) &quot; &quot;VALUES (:channelId, :userId) &quot; &quot;ON CONFLICT (channelId, user_id) DO NOTHING;&quot;, PARAM(oatpp::UInt64, channelId), PARAM(oatpp::UInt64, userId))'],['../classmicroTube_1_1component_1_1DatabaseClient.html#a777808487ac5fa237b08315e8a27ce80',1,'microTube::component::DatabaseClient::QUERY(createChannelWithDescription, &quot;INSERT INTO Channel (description) &quot; &quot;VALUES (:description) &quot; &quot;RETURNING id;&quot;, PARAM(oatpp::String, description))'],['../classmicroTube_1_1component_1_1DatabaseClient.html#ad9af4949387a8ad07664bff7e064d072',1,'microTube::component::DatabaseClient::QUERY(updateUserInfo, &quot;UPDATE User &quot; &quot;SET email = :user.email, &quot; &quot;    password = :user.password, &quot; &quot;    nickname = :user.nickname, &quot; &quot;    firstname = :user.firstname, &quot; &quot;    lastname = :user.lastname, &quot; &quot;    phonenumber = :user.phonenumber, &quot; &quot;    birthDate = :user.birthDate, &quot; &quot;    secretQuestion1 = :user.secretQuestion1, &quot; &quot;    secretQuestion2 = :user.secretQuestion2, &quot; &quot;    secretQuestion3 = :user.secretQuestion3, &quot; &quot;    secretAnswer1 = :user.secretAnswer1, &quot; &quot;    secretAnswer2 = :user.secretAnswer2, &quot; &quot;    secretAnswer3 = :user.secretAnswer3, &quot; &quot;    isAdmin = :user.isAdmin, &quot; &quot;    isActive = :user.isActive &quot; &quot;WHERE id = :id;&quot;, PARAM(oatpp::Object&lt; microTube::dto::UserDatabaseEntry &gt;, user), PARAM(oatpp::UInt64, id))'],['../classmicroTube_1_1component_1_1DatabaseClient.html#a0a10cbf1d83a8d01f5f105a8af571611',1,'microTube::component::DatabaseClient::QUERY(getChannelIdByUserId, &quot;SELECT channelId &quot; &quot;FROM UserChannelJunction &quot; &quot;WHERE user_id = :userId &quot; &quot;LIMIT 1;&quot;, PARAM(oatpp::UInt64, userId))'],['../classmicroTube_1_1component_1_1DatabaseClient.html#a038121b4a4fe8614e05eb6db7fd31dfc',1,'microTube::component::DatabaseClient::QUERY(getSubscribedChannelsForUser, &quot;SELECT c.id, c.description &quot; &quot;FROM User_Channel_Subscriptions ucs &quot; &quot;INNER JOIN Channel c ON ucs.creatorID = c.id &quot; &quot;WHERE ucs.memberID = :userId;&quot;, PARAM(oatpp::UInt64, userId))']]]
];
